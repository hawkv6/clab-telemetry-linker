// Code generated by MockGen. DO NOT EDIT.
// Source: set.go
//
// Generated by this command:
//
//	mockgen -source=set.go -destination=set_mock.go -package=command
//

// Package command is a generated GoMock package.
package command

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSetCommand is a mock of SetCommand interface.
type MockSetCommand struct {
	ctrl     *gomock.Controller
	recorder *MockSetCommandMockRecorder
}

// MockSetCommandMockRecorder is the mock recorder for MockSetCommand.
type MockSetCommandMockRecorder struct {
	mock *MockSetCommand
}

// NewMockSetCommand creates a new mock instance.
func NewMockSetCommand(ctrl *gomock.Controller) *MockSetCommand {
	mock := &MockSetCommand{ctrl: ctrl}
	mock.recorder = &MockSetCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetCommand) EXPECT() *MockSetCommandMockRecorder {
	return m.recorder
}

// AddDelay mocks base method.
func (m *MockSetCommand) AddDelay(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDelay", arg0)
}

// AddDelay indicates an expected call of AddDelay.
func (mr *MockSetCommandMockRecorder) AddDelay(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDelay", reflect.TypeOf((*MockSetCommand)(nil).AddDelay), arg0)
}

// AddJitter mocks base method.
func (m *MockSetCommand) AddJitter(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddJitter", arg0)
}

// AddJitter indicates an expected call of AddJitter.
func (mr *MockSetCommandMockRecorder) AddJitter(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJitter", reflect.TypeOf((*MockSetCommand)(nil).AddJitter), arg0)
}

// AddLoss mocks base method.
func (m *MockSetCommand) AddLoss(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLoss", arg0)
}

// AddLoss indicates an expected call of AddLoss.
func (mr *MockSetCommandMockRecorder) AddLoss(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLoss", reflect.TypeOf((*MockSetCommand)(nil).AddLoss), arg0)
}

// AddRate mocks base method.
func (m *MockSetCommand) AddRate(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRate", arg0)
}

// AddRate indicates an expected call of AddRate.
func (mr *MockSetCommandMockRecorder) AddRate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRate", reflect.TypeOf((*MockSetCommand)(nil).AddRate), arg0)
}

// ApplyImpairments mocks base method.
func (m *MockSetCommand) ApplyImpairments() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyImpairments")
}

// ApplyImpairments indicates an expected call of ApplyImpairments.
func (mr *MockSetCommandMockRecorder) ApplyImpairments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyImpairments", reflect.TypeOf((*MockSetCommand)(nil).ApplyImpairments))
}

// DeleteImpairments mocks base method.
func (m *MockSetCommand) DeleteImpairments() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteImpairments")
}

// DeleteImpairments indicates an expected call of DeleteImpairments.
func (mr *MockSetCommandMockRecorder) DeleteImpairments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImpairments", reflect.TypeOf((*MockSetCommand)(nil).DeleteImpairments))
}
